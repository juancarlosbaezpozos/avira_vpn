using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace Avira.Common.Core.CertificateTools
{
    internal class AuthenticodeVerifier : IAuthenticodeVerifier
    {
        private static class NativeMethods
        {
            public const int ERROR_INSUFFICIENT_BUFFER = 122;

            public static void QueryFullProcessImageName(Process process, int flags, StringBuilder exeName,
                ref int size)
            {
                if (!QueryFullProcessImageName(process.Handle, flags, exeName, ref size))
                {
                    throw new Win32Exception();
                }
            }

            [DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
            private static extern bool QueryFullProcessImageName([In] IntPtr hProcess, [In] int dwFlags,
                [Out] StringBuilder lpExeName, ref int lpdwSize);

            [DllImport("kernel32", CharSet = CharSet.Unicode, SetLastError = true)]
            public static extern IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, uint dwFlags);

            [DllImport("kernel32", BestFitMapping = false, CharSet = CharSet.Ansi, ExactSpelling = true,
                SetLastError = true, ThrowOnUnmappableChar = true)]
            public static extern IntPtr GetProcAddress(IntPtr hModule,
                [MarshalAs(UnmanagedType.LPStr)] string procName);
        }

        private static readonly List<string> TrustedAviraCertificates = new List<string>
        {
            "3082010A0282010100C876D2B6CB80462E940846C9CB8D537DE363EC642BEE0D6DDA5AB888598B705E7AAB005D7868FE25880CB2F7979ABE5D6C97D517F3460BBA7050E31CE2B7B5BFC90071DC85DBFD6F17389E9EE40B22A7B3B569DDCC1E82F340C1B47F156A66646EB1AA89049DAF67611F7D347528262A6D4474AC05FB5F5B89407EB205D5C717CDF9A38218F1F3EABBAA799683809C25E36B6D7BA12A72E426992CBCE8A8B4C90386287475090AAB0CC8A0F28BF85F70B9A86782866A404664E8AF7513E522B88F7DF6686B40FCF1C8EB0FC61A7B4CF0211F6809A5C11FE8FE404AE2D72429E0D2F4D183F597FAEE8C0FA33F0E728ED64BD9E4963E8461EB73FFBFBEE5B269F10203010001",
            "3082010A0282010100BEDA58E6104CF53D7ECD277BF608D0E6A5CF8FB747791939C78247A49FF67594B25F124B56D0781CC8B18709C7F9F3A4474583759BE9D6999DB7BAD3828D34547A492D1A0FCE6B86A530F72D03DA448D2824B69F9FCD27CB2AAEACA814E14D562D0029B494036C1620DFFBA7C8FE5CEB49E011B4F92DC98118DA477E6928811FAF9BA68D9DC1D754C8D6FEC55ACD1C8E92E5D867FB1781D68E671BDEEDF4346D92548A23CDD7AEE39FC7FEB7FB7FD0BFB9D25E9863A5E652A324E5AFCB4C12FFF3A5C172D34E96F4119A9019A130B34D18CCF2781FC56955EED6066EDF700BA12C0AFE8262A84CCE0F3189E1482AE7FEB29C17CA1D765FCA331C10BF05D091710203010001",
            "3082010A0282010100A33ED469B1C48F0A3A03A3D772E7679A92C9C34542B2FA8E1A953C3A958A997CFDBF5858B237331B55F30F86ED006BDB235E48D8D90D1842F35E5F8CBD39BA79E790F15A375A000FD242374F0D0CCFA1BC542DAB4C2C63755DB2195779B1B19221C156E1A6E0E3393FD6BDFD528B61D969A4477F771B69DF095D3235C195A8570B1A99742188F68D82E3DF98E326601FBF87DE38CEF26CC568B63DDE6C028E336006AE016EE069947E22AB8F03C3ADCCB029C628A34B95A4274E111504A4ABA6E3856D1962221CF0EA08E6C48DA925BBC0AEC121CA3035B469AFAC971AFC109104ED5DB373EA8FC1897C65C67F5B2F764B8D52CB6E6B269965EEA948FEE7CDD10203010001",
            "3082010A0282010100960084627FF5E223FD6DB1366065617D805B2F89CF43BB1E487ACF2D8B59ABBA14C4C1C3B0AD7D58B1C5A02FA7514DD0362D30342E53146FD3CB4E17CAE05665A72EB7B4304D54F8CD73D1FFAF549CAD5503FA4795258276AB047B261ACAA07807D45B4FDC0FED9FDAE30A58A2F68646E8E64FC209AF701A770B26336F26D656310F852008C623F0622D8267F222966DC979BD5407DDF8DEAC091B591C57C6C34296C02C7E10928B59B2CC293E29D5699583CD571AC44E9B2BC110B249CEB1B10DCD0DCA02BE71B4923A105F5D4D7B94F67528C3E4E45C5F2E86F2EA117502F83E678121EE8922E9444D03B7F1551DA27293BCB3BBDC4CC0F2C3EA74FC8D82E50203010001",
            "3082010A0282010100B5F56BDBCD412B41B9E34A13D24E88A6D43122A038B9F88EA763788B03757D2116E6868F843F01DD20F340B728AB16D94D823BBB9004DF6E4882082ABB011A309DF1654C9739EC5679DB13C4527045BAAEFB5F047EB5C5FCC576A9504A79CD613D33D55B79A0862D2786DEFF7BF5B46E53C35994D4DE8F536D88AA83CF0A358E8DCA27C6D5FBBF1F474DC9D3841825092953F9A43CC871304EF5D3AA007A641FDABFD250618B72D73436B95D845932EA56094CB804029D5FFD70636D15791F165FF800200853D5CB0C430DA31B7C765A037ABBDFAC7AF14F6DD76D90BBA579CCED90B78694069ED3AD482EE597C9219550209094C54845A472B07D6EC11F3CAD0203010001",
            "3082010A02820101008AEE7EC5915682B1FE23DD9FDB872604F2D2067ED262C42890181B2F17144AA8A16786D11685755FB4EED2E938D3D19891DDDB0D3A0BAA8ACFB479703DC33EBB1DDB3DD46E1FDBBFAE15CDBEAF25D04E5221E110078249851C132CB4D1E927B9E9745792D705278CB293103A7DBFFCC32080C40B22FB39574195CBB7BCE6DD3EF792E73052C5F7D4D1A4FC915A084F2095DBDA7D6923B9F050C1A974E16C50E2C90B3658F86355376BB80104300DAA1418932E2A8EC8AA373FD490861ABF7A3F945156CA7649B885729515A90140223A66819A66E3CB9F7CA8B88534505BBF2365FD869B02F8F96EE8CA398121D67BD53ACE7A972BDD2524045E3BF7B4DCE82B0203010001",
            "3082010A0282010100E4A021FC28F082ABB75DD5A65D95BF958F274A97BD20DEF98D380C77152CF317AC32F4EA36204CA8DF34A4FCF410B40C2DAC75267F30323C93800F0532CC65CA561CC7DE04340EC61F0801A50D647C1B77F49D709CBBB57D19CCF81FC53C61C6960FA42A0394BE8C66042ED6C58101C353A653BCB91471109442C78632D5C8FA818EC511F2B8C39D8F7F030278BDA6DAF8D038B539A45F8A70794D7855DC4A1D675FD6C58A94A674AF0F8EC4B533B87F7B12BBAFFF60F6BE014900D74C1907F0049BD900395E2BC76211FAE6DC1134B8CE982190612E5D32B4C520EA2253D680FCAB0F247E525FE5EE9C1F71F470CED3192C32CDBC01DADD493D5586C7C172910203010001",
            "3082010A0282010100992E5BA60EE749D35F6ABEB77EEBB6F72B4663F2307DB1DFF8ECCE9FE18E8217E6F3FBF27D26EE73F8D3622EC8084DAFAFC963DFCB305B9CB84566E714852BCE7F9166AA87DD88341D72F5390E962E0E0E7B0E45EE64883A852C837A5CC27F3EA1AADF10B7B7751B06FCBB4EEC08E9FECEDF484F9FB78674D91C4FB66B1547C11FA00E9B125369F00419F43F6F0AF3928CCF50DCC5758C9FABBFEBEE0BB476B09AD2EC82FBAA953C0226E5692864199909C4349436D9802F540761920BA16C9BD07F05AD3657EB389775AFCC14D0CEF9B4613404E4B0325EE81D8F26501CB4BF5F01DE8356EEA68CB9D3ECC0B1D0D7A639F79ACE358297E0CFE3676E5FE45BF30203010001",
            "3082010A0282010100ACD56D9903D1F9A631092BC82E7868C25DDEA6C8D2D5B6FDCE5BBD981B2F6A74D68EFC22A09E7A85E2429DB552AF0250D55626989E55841892F716ABA3D63A3DAEEE8AC78CDC9F14557B9174F377E4F33514012FA58D9F9BC8BCC460D83C97F6FCD9589B4F99864F9CE2A092B9E391EF360540C2D2AF0CAC036CFBE225180CF2DF729F44C12AFE703E5D21C42115E22543E32C17A2933C10939111388936E04A7A7388B918238859FB4F322A34D3DF50BEF4CB85763ACF25B9C553984FA349DF16E1BA91533475CDC1684085A6E2129EA40BC00D75818C3F28AC80ACB96A0E5D9A9DB33A9DC6BE6C5B8016E5503D1BF746FF212A38B3CDAC8B1CA08DCF083F510203010001",
            "3082010A0282010100B7A160EF58BEE6BBD154CC6532CCA719273D08F531BE3C5836C8EFB815820814EE16C2EC6F3C683B19F9656456BB6630ADF5EA13739082D65133B6408F450BFD2FFAD653B4108B334CE5050B3F4FDD60DA0ACD469BEF6256A10317D42138E585A93FDA2093B34A200AF666B23A6805B170BE9B934B5FAAFDC336C9541E97E38C4FD0DFDA6DDF3B2D734682E276E72690EC047E5AB890CFA3845A58AE2CD47A68BB87B422A00883C2F3ACEA3869D0D1169C2C0E39FF157DF5BBAB6B410232930B3C5FD9EF3F4911A50455CB53E5B4BA66E0008B73D4DFDFC5D3487580BB732DC24573F38DAB4F21D7C404A6C9C506CD38751C49D887837B2574103E9F4A56A1C30203010001",
            "3082010A0282010100AD5F37B995C3FD83F9C673626AEF5FDFFE2B9F30FAE2150641C8F7EEF95F5F1A03CA6F9CF4F74AA3E7F5D8C5C118128AD6985752B92C4283EA371AAEFB26AD6831304B7AC401B656727CCDFB46BD2A53C7752A9A734881AA691612C60F015F7C3BDB856B6757B5BD3A0A72F013A6D75E06A7DC58350AAF39610702E6D1C5838E60E7A23BBEA1291929656B805504C12CD03A002F8A23299D7DE9651776D2F7E17BD528C6F263DE19AE8BA5686F42E3B41BC0674477E14B69EA8B3568035FFEA93AB34AF64C67C67F6BE1EF6E9EA4600352C570D048665EBECCDA24E8DB23493D6CD20D2BB9DC1332DA160E4FBF6320D9E3E438127BDC5A4F7A00961E770F5A810203010001",
            "3082010A0282010100B54B10FE8DD9E20AF346E5F88E7D625243817EFE05457155E0D083C5493AD11601386A73AC78B78E51ED3F49BB161DC2B0FC1AA13742BC5D608D67E6440CACF6C296CFD744112F96D679BC68A2C9A164D6CD2A810BF3D85CDE15652370423A2E51397E8C2C4EC2186967F4F86E500EE756B36FE3731B8CEC874FF94F71726B16510F84B92DAF4E7377A1AE66A7A28FF307A0CB3356D625B858727078B4D3ACF5F0DD062F7D063408B48261480D1ADBD931EE3F9B83A052C7DA6B99E5E94D64D84CFC8BD8B1D22607933FEA554671DE424204A0DD90E1368938936FAA3E847155CAD16093330B06AB4C7897257E450EA4FF6415803EBC01EE6FA0CDF6F66B1AB70203010001",
            "3082010A02820101009C3CD5569F064BC68F0E5FF9B06372A57E22785E6119305D47B33C5DAF929D4EF0C5D27AD18EC667C34A9C76960FEA20AAF947B6DDEB5EEAD3AA279376D2E97DC95AF76A5204E77EAF39FCDAB3FC8A8715E76C82F5F2F3FA6BF8EEDCB5C86898CA4F0C2FC17FAB349709D8016A9AA93B03B8EA5C0F83FEC8868CC7D69CB332E645BD0F219F75B7FB977714F54DFD2AD7DAC03A97FCE55D8720822646D407CFA0BC4B29050361A959BCF9A51D018A5E8A41600CBAB58A1B12BB579921F7C65C429B7DD96BD5D944AFCF341A6180804FB10370DE5A2C9A180EB27C448EE05FE83F8E6FD6A78AEB93E84793182A26682DF1805C63DA796C6F2943464AA160085CDD0203010001",
            "3082010A0282010100BF9694B09F6CFED0C037FB1B305ABAC717616B3B83BBEEEFA131463AC282DF5F8EAA3ED8DD2DA02FE30BFB8D16FC2DAC7BC54E2A556B8E4293BFF852508D222799AB410E5DCCCCBA2262D74BD444FE4931F3A15883D2C75033D92AEC54306686C2C463550409899EF3AE94CE4100B52B083625BA878711DFCE8F7EDA80DE008ACAC31E4EABCFB1B74F642563746124F2E761BD34FD536E4860E26607D0C4918E6250AC3F1A1D939C267CC1F15C063939D7D74A4686A972115AF8EFE81A6990C0208BB25CAC2D93D6029168032EEC59443154A0159ED6E6C60EFD1025C39B969A6F78F326E676C241822BF9225B724B705C5A5FE6C26038FFDB13C337D03287E50203010001",
            "3082010A0282010100E51C24AEF52FAFD549B0043E3439F30CB09B6EFCAE2B2C04E5DD56FA1D94C3AB6FF50399E0FC3B361E4B984815CD4F82DF0BC8079DD18CF6A4F19986A59E42CF663BBCA1BA627183710EE2F1425B6BCC7A1EC57127BD199B36EBB3B3E780AD3D9414AC5F320E964CAA4762EAB210C2CCD844B45AE7A07EDB76EA70ABB01ED6140C82A13C831CE7EBFE8EE016CC81672C168A2F77F20BED4BFFA97DCCA6EA88AE0783359AD82665B3B48BE9C942B0E101EB9AD923AEFC02E303D7F80E864CB55107BBE8183559FEB63157B5BB9F07A4413740E8A2B367898C39940DBBC7F0AA886E109420055C1A4D02DA0BF179E161AAF67C0D58965BDD5DA24C9EF194A4FD7D0203010001",

            "3082010A0282010100EF5112DA787F5988A5AA179140B504BA7EEFA2380242E93509EF85C951DE50301F67A10970A9D7A00EF852441669ABADC0EC0AADB5B2E30010F833EAF9F2F94078830FA5366DEA41DC06F1E97ECDEAB688117276EFA9813AC074B4BD22F60679E4026C03AF2B6C21A795F4900C4F2DBDCCFD0B43E2889A35DECFE3B188BF5308863AF80BF7E9A5BBD50D0C1F1C0E5F26BD84CEDF95628359B88FE92BD4D30235B48BFB9778EC1B43E1C39D29A8C4C04E5280ED699E5ADEC03924975CDE70A4670EDC7F4FF097DCFE765A6377438B54EA5EBFF1EE90C1C93A98F45E460FBCB69E3BC30FD24A30ABF57CA687560C33B3297DBFCE954CC8031A89B5A572FE7B8F090203010001",
            "3082010A0282010100B1C3C44B562DF297959288BD693F105C338E47E0FE5E922C521DD577FA81FAF3FD8AF8816BD6E7DC90CC61D845B0AA904544E6B154047541CE3113BBB288F0BC68A6A91607F8F216B89215C51E46591A39D08F25C42B4F030892330E2174E2D0EA795508017614D12627E22C6D87D7F26FA44CA8C3C7A0E8C04320BA2FE7D7035747D2CACE9249C25F4189149742C15F6DACF36CB72F7E368C5988E94C41474FCA8D21FA52D19C51C40B6CF7964F75158738CA8C3EF91A874212304D676E108BAB7E5DAE1A7D065BE46F5C4C92CF2E63C8510FFB41D9D312256FDCE68C98E5FEDC85F1EA0D9191554D0D81614B1CA18EF2AB89543A8D89380970CE61EEC25CCF0203010001"
        };

        private static readonly List<string> TrustedThirdPartyCertificates = new List<string>
        {
            "3082010A0282010100E57C2F2D0CA9EC7AA834E04C3F7F490E0DB615AD1913DE528A26991571A962270737A5833082626C0BA3FD060D171406E6E0ADCC95960A205AA296E1E057303C5D629BC55D890CD034DFD9D8FA35EF11238BC0F9EB4AF439DA2F7110EB11B32C37A370E886173EEF2A46D08EC7B94800A137F1C7C8E7D21E6B4A2AF2C64C1D709F7CC368428E3CED811A52E33E32943D7E18F19BE44B5C11E4D6C3851E6C033073BCC9A8017D9DADD1F573F05B1A7B2F1F8B32BEB38EB53BD9F7FFF35FB3137C139357B8A05E359883A13434F2C5049FB9FE46170C91DFEF0F55F6ECCC39C96165A129EEBE11371BB76E4255C9CC35D152B303709C98349E2936A917195F0BBF0203010001",
            "3082010A0282010100E8AF5CA2200DF8287CBC057B7FADEEEB76AC28533F3ADB407DB38E33E6573FA551153454A5CFB48BA93FA837E12D50ED35164EEF4D7ADB137688B02CF0595CA9EBE1D72975E41B85279BF3F82D9E41362B0B40FBBE3BBAB95C759316524BCA33C537B0F3EB7EA8F541155C08651D2137F02CBA220B10B1109D772285847C4FB91B90B0F5A3FE8BF40C9A4EA0F5C90A21E2AAE3013647FD2F826A8103F5A935DC94579DFB4BD40E82DB388F12FEE3D67A748864E162C4252E2AAE9D181F0E1EB6C2AF24B40E50BCDE1C935C49A679B5B6DBCEF9707B280184B82A29CFBFA90505E1E00F714DFDAD5C238329EBC7C54AC8E82784D37EC6430B950005B14F6571C50203010001"
        };

        private static readonly string aviraCertificateCommonName = "Avira Operations GmbH & Co. KG";

        private readonly bool skipTrustCheck;

        private readonly string executingAssemblyLocation;

        private readonly WinVerifyTrustDelegate winVerifyTrustDelegate;

        private bool? executingAssemblySigned;

        private string executingAssemblyPublicKey;

        public AuthenticodeVerifier()
            : this(Assembly.GetExecutingAssembly().Location)
        {
        }

        public AuthenticodeVerifier(string executingAssemblyLocation, bool skipTrustCheck = false)
        {
            this.executingAssemblyLocation = executingAssemblyLocation;
            this.skipTrustCheck = skipTrustCheck;
            winVerifyTrustDelegate = LoadVerifyTrustDelegate();
        }

        internal static X509Certificate GetCertificate(string file)
        {
            try
            {
                return X509Certificate.CreateFromCertFile(file);
            }
            catch (CryptographicException)
            {
                return null;
            }
        }

        public IEnumerable<string> GetValidPublicKeys()
        {
            List<string> list = new List<string>();
            list.AddRange(TrustedAviraCertificates);
            list.AddRange(TrustedThirdPartyCertificates);
            return list;
        }

        public string GetAviraCertificateCommonName()
        {
            return aviraCertificateCommonName;
        }

        public AuthenticodeVerificationResult VerifyAviraSignature(string file)
        {
            if (IsExecutingAssemblySigned())
            {
                return HasTrustworthyAviraSignature(file);
            }

            return new AuthenticodeVerificationResult(AuthenticodeError.Success);
        }

        public AuthenticodeVerificationResult VerifyAviraSignature(Process process)
        {
            if (!TryGetExecutablePath(process, out var executablePath))
            {
                return new AuthenticodeVerificationResult(AuthenticodeError.ErrorCannotReadExecutablePath);
            }

            return VerifyAviraSignature(executablePath);
        }

        public AuthenticodeVerificationResult VerifySignature(string file, IEnumerable<string> validPublicKeys)
        {
            return VerifySignature(file, validPublicKeys, aviraCertificateCommonName);
        }

        public AuthenticodeVerificationResult VerifySignature(string file, IEnumerable<string> validPublicKeys,
            string validAviraCertificateCommonName)
        {
            if (!IsExecutingAssemblySigned())
            {
                return new AuthenticodeVerificationResult(AuthenticodeError.Success);
            }

            return CheckTrustworthySignature(file, validPublicKeys, validAviraCertificateCommonName);
        }

        public bool IsExecutingAssemblySigned()
        {
            if (!executingAssemblySigned.HasValue)
            {
                executingAssemblySigned = GetExecutingAssemblyCertificatePublicKey() != null;
            }

            return executingAssemblySigned.Value;
        }

        internal AuthenticodeVerificationResult CheckTrustworthySignature(string file,
            IEnumerable<string> validPublicKeys, string validCommonName)
        {
            if (winVerifyTrustDelegate == null)
            {
                return new AuthenticodeVerificationResult(AuthenticodeError.ErrorCannotLoadWinTrust);
            }

            if (!skipTrustCheck &&
                !IsSignatureValid(file, out var trustCheckResult, out var lastWin32Error, preventOnlineCheck: true) &&
                !IsSignatureValid(file, out trustCheckResult, out lastWin32Error, preventOnlineCheck: false))
            {
                return new AuthenticodeVerificationResult(AuthenticodeError.ErrorNotValidSignature)
                {
                    LastWin32Error = lastWin32Error,
                    TrustCheckResult = trustCheckResult
                };
            }

            X509Certificate2 certificateFromFile = GetCertificateFromFile(file);
            if (certificateFromFile == null)
            {
                return new AuthenticodeVerificationResult(AuthenticodeError.ErrorEmptySignature);
            }

            if (!IsKnownSignature(certificateFromFile, validPublicKeys) &&
                !IsKnownCommonName(certificateFromFile, validCommonName))
            {
                return new AuthenticodeVerificationResult(AuthenticodeError.ErrorUnknownSignature, certificateFromFile);
            }

            return new AuthenticodeVerificationResult(AuthenticodeError.Success);
        }

        internal AuthenticodeVerificationResult HasTrustworthyAviraSignature(string file)
        {
            AuthenticodeVerificationResult authenticodeVerificationResult =
                CheckTrustworthySignature(file, TrustedAviraCertificates, aviraCertificateCommonName);
            if (authenticodeVerificationResult.Error == AuthenticodeError.ErrorUnknownSignature)
            {
                if (!IsOwnCertificate(authenticodeVerificationResult.Certificate.GetPublicKeyString()))
                {
                    return new AuthenticodeVerificationResult(AuthenticodeError.ErrorNotTrustworthySignature);
                }

                return new AuthenticodeVerificationResult(AuthenticodeError.Success);
            }

            return authenticodeVerificationResult;
        }

        private static bool TryGetExecutablePath(Process process, out string executablePath)
        {
            try
            {
                executablePath = GetExecutablePath(process);
                return true;
            }
            catch
            {
                executablePath = null;
                return false;
            }
        }

        private static string GetExecutablePath(Process process)
        {
            int size = 260;
            StringBuilder stringBuilder = new StringBuilder();
            while (true)
            {
                stringBuilder.Capacity = size;
                try
                {
                    NativeMethods.QueryFullProcessImageName(process, 0, stringBuilder, ref size);
                    return stringBuilder.ToString(0, size);
                }
                catch (Win32Exception ex)
                {
                    if (ex.NativeErrorCode != 122)
                    {
                        throw;
                    }
                }

                size *= 2;
            }
        }

        private static bool IsKnownSignature(X509Certificate certificate, IEnumerable<string> validPublicKeys)
        {
            return validPublicKeys.Any((string trustedCertificate) =>
                trustedCertificate.Equals(certificate.GetPublicKeyString(), StringComparison.OrdinalIgnoreCase));
        }

        private static bool IsKnownCommonName(X509Certificate2 certificate, string validCommonName)
        {
            return certificate.GetNameInfo(X509NameType.SimpleName, forIssuer: false) == validCommonName;
        }

        private static X509Certificate2 GetCertificateFromFile(string file)
        {
            try
            {
                return new X509Certificate2(file);
            }
            catch (CryptographicException)
            {
                return null;
            }
        }

        private bool IsSignatureValid(string file, out uint trustCheckResult, out int lastWin32Error,
            bool preventOnlineCheck)
        {
            trustCheckResult = WinVerifyTrustNativeMethods.WinVerifyTrust(file, winVerifyTrustDelegate,
                out lastWin32Error, preventOnlineCheck);
            if (trustCheckResult != 0)
            {
                return trustCheckResult == 2148204801u;
            }

            return true;
        }

        private bool IsOwnCertificate(string publicKey)
        {
            string executingAssemblyCertificatePublicKey = GetExecutingAssemblyCertificatePublicKey();
            if (publicKey == null || executingAssemblyCertificatePublicKey == null)
            {
                return false;
            }

            return executingAssemblyCertificatePublicKey.Equals(publicKey, StringComparison.OrdinalIgnoreCase);
        }

        private WinVerifyTrustDelegate LoadVerifyTrustDelegate()
        {
            IntPtr intPtr = NativeMethods.LoadLibraryEx(Path.Combine(Environment.SystemDirectory, "wintrust.dll"),
                IntPtr.Zero, 0u);
            if (intPtr == IntPtr.Zero)
            {
                return null;
            }

            IntPtr procAddress = NativeMethods.GetProcAddress(intPtr, "WinVerifyTrust");
            if (procAddress == IntPtr.Zero)
            {
                return null;
            }

            return (WinVerifyTrustDelegate)Marshal.GetDelegateForFunctionPointer(procAddress,
                typeof(WinVerifyTrustDelegate));
        }

        private string GetExecutingAssemblyCertificatePublicKey()
        {
            if (executingAssemblyPublicKey == null)
            {
                X509Certificate certificate = GetCertificate(executingAssemblyLocation);
                if (certificate == null)
                {
                    return null;
                }

                executingAssemblyPublicKey = certificate.GetPublicKeyString();
            }

            return executingAssemblyPublicKey;
        }
    }
}